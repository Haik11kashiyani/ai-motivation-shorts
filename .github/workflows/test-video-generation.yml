name: Test Video Generation

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
    paths:
      - 'main.py'
      - 'motivational_content.json'

jobs:
  generate-test-video:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install System Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y ffmpeg fonts-dejavu-core fonts-dejavu-extra
        echo "System dependencies installed"
    
    - name: Install Python Packages
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        echo "Python packages installed"
    
    - name: Create Output Directory
      run: |
        mkdir -p output
        echo "Output directory created"
    
    - name: Generate Test Video
      env:
        ELEVEN_API_KEY_1: ${{ secrets.ELEVEN_API_KEY_1 }}
        ELEVEN_API_KEY_2: ${{ secrets.ELEVEN_API_KEY_2 }}
        ELEVEN_API_KEY_3: ${{ secrets.ELEVEN_API_KEY_3 }}
      run: |
        echo "Starting video generation..."
        
        # Simply run main.py directly (it has __main__ section)
        timeout 600 python main.py || echo "Generation completed or timed out"
        
        # Wait for file to be fully written
        sleep 5
        
        # Check output
        echo "Checking output directory..."
        ls -lah output/ || echo "No output directory found"
      continue-on-error: true
    
    - name: Check Video Output
      id: check_video
      run: |
        echo "Checking for generated video..."
        
        if [ -d "output" ] && [ "$(ls -A output/*.mp4 2>/dev/null)" ]; then
          VIDEO=$(ls output/*.mp4 | head -n 1)
          echo "found=true" >> $GITHUB_OUTPUT
          echo "video_path=$VIDEO" >> $GITHUB_OUTPUT
          
          echo "Video found: $VIDEO"
          
          # Get file size
          SIZE=$(du -h "$VIDEO" | cut -f1)
          echo "size=$SIZE" >> $GITHUB_OUTPUT
          echo "File size: $SIZE"
          
          # Get video info if possible
          if command -v ffprobe &> /dev/null; then
            DURATION=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$VIDEO" 2>/dev/null | cut -d'.' -f1 || echo "unknown")
            RESOLUTION=$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "$VIDEO" 2>/dev/null || echo "unknown")
            
            echo "duration=${DURATION}s" >> $GITHUB_OUTPUT
            echo "resolution=$RESOLUTION" >> $GITHUB_OUTPUT
            
            echo "Duration: ${DURATION}s"
            echo "Resolution: $RESOLUTION"
          fi
        else
          echo "found=false" >> $GITHUB_OUTPUT
          echo "No video file found"
        fi
    
    - name: Extract Thumbnail
      if: steps.check_video.outputs.found == 'true'
      run: |
        VIDEO="${{ steps.check_video.outputs.video_path }}"
        
        # Check if video has video stream
        if ffprobe -v error -select_streams v:0 -show_entries stream=codec_type -of csv=p=0 "$VIDEO" 2>/dev/null | grep -q video; then
          echo "Extracting thumbnail..."
          ffmpeg -i "$VIDEO" -ss 00:00:03 -vframes 1 output/preview.png -y 2>/dev/null || true
          
          if [ -f output/preview.png ]; then
            echo "Thumbnail extracted successfully"
          else
            echo "Could not extract thumbnail"
          fi
        else
          echo "Video has no video stream, skipping thumbnail"
        fi
      continue-on-error: true
    
    - name: Upload Video Artifact
      if: steps.check_video.outputs.found == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: generated-video
        path: output/*.mp4
        retention-days: 7
    
    - name: Upload Thumbnail Artifact
      if: steps.check_video.outputs.found == 'true' && hashFiles('output/preview.png') != ''
      uses: actions/upload-artifact@v4
      with:
        name: video-thumbnail
        path: output/preview.png
        retention-days: 7
        if-no-files-found: ignore
    
    - name: Final Report
      if: always()
      run: |
        echo ""
        echo "================================================================"
        echo "                   VIDEO GENERATION REPORT"
        echo "================================================================"
        echo ""
        
        if [ "${{ steps.check_video.outputs.found }}" == "true" ]; then
          echo "Status: SUCCESS"
          echo ""
          echo "Video Details:"
          echo "  File: $(basename ${{ steps.check_video.outputs.video_path }})"
          echo "  Size: ${{ steps.check_video.outputs.size }}"
          echo "  Duration: ${{ steps.check_video.outputs.duration }}"
          echo "  Resolution: ${{ steps.check_video.outputs.resolution }}"
          echo ""
          echo "Download your video from the 'Artifacts' section above!"
        else
          echo "Status: FAILED"
          echo ""
          echo "Video was not generated. Check the logs above for errors."
        fi
        echo ""
        echo "================================================================"
