name: Quick Video Test

on:
  workflow_dispatch:  # Manual trigger only
  push:
    paths:
      - 'main.py'
      - 'motivational_content.json'

jobs:
  generate-test-video:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: 🔧 Install FFmpeg & Fonts
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y ffmpeg fonts-dejavu-core fonts-dejavu-extra
    
    - name: 📦 Install Python Packages
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 📝 Create Test Script
      run: |
        cat > test_video.py << 'EOF'
        import os
        os.makedirs('output', exist_ok=True)
        
        # Prevent the automation from starting
        import sys
        
        # Import just what we need
        exec(open('main.py').read().replace('automation.start_automation()', '# Automation disabled for testing'))
        
        # Now generate one video
        print("Creating test automation instance...")
        automation = ShortsAutomation()
        print("Generating single video...")
        automation.generate_and_post_short()
        EOF
    
    - name: 🎬 Generate Video
      id: generate
      run: |
        # Use the main.py directly but just run once (don't schedule)
        timeout 300 python main.py || true
        
        # Wait a bit for file to be written
        sleep 5
      continue-on-error: true
    
    - name: 📊 Check Output
      id: check_output
      run: |
        echo "Checking for generated video..."
        
        if [ -d "output" ] && [ "$(ls -A output/*.mp4 2>/dev/null)" ]; then
          VIDEO=$(ls output/*.mp4 | head -n 1)
          echo "found=true" >> $GITHUB_OUTPUT
          echo "video_path=$VIDEO" >> $GITHUB_OUTPUT
          
          echo "✅ Video found: $VIDEO"
          
          # Get video info
          SIZE=$(du -h "$VIDEO" | cut -f1)
          echo "size=$SIZE" >> $GITHUB_OUTPUT
          
          # Get duration and resolution
          DURATION=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$VIDEO" 2>/dev/null | cut -d'.' -f1)
          RESOLUTION=$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=s=x:p=0 "$VIDEO" 2>/dev/null)
          
          echo "duration=${DURATION}s" >> $GITHUB_OUTPUT
          echo "resolution=$RESOLUTION" >> $GITHUB_OUTPUT
          
          echo "📏 Size: $SIZE"
          echo "⏱️  Duration: ${DURATION}s"
          echo "📐 Resolution: $RESOLUTION"
        else
          echo "found=false" >> $GITHUB_OUTPUT
          echo "❌ No video file found"
        fi
    
    - name: 📸 Extract Thumbnail
      if: steps.check_output.outputs.found == 'true'
      run: |
        VIDEO="${{ steps.check_output.outputs.video_path }}"
        ffmpeg -i "$VIDEO" -ss 00:00:03 -vframes 1 output/preview.png -y
        echo "✅ Thumbnail extracted"
    
    - name: 📤 Upload Video
      if: steps.check_output.outputs.found == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: viral-short-video
        path: output/*.mp4
        retention-days: 5
    
    - name: 📤 Upload Thumbnail
      if: steps.check_output.outputs.found == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: video-preview
        path: output/preview.png
        retention-days: 5
    
    - name: 📊 Final Report
      if: always()
      run: |
        echo ""
        echo "╔════════════════════════════════════════════════════════╗"
        echo "║           🎬 VIDEO GENERATION REPORT                   ║"
        echo "╚════════════════════════════════════════════════════════╝"
        echo ""
        
        if [ "${{ steps.check_output.outputs.found }}" == "true" ]; then
          echo "Status: ✅ SUCCESS"
          echo ""
          echo "Video Details:"
          echo "  📹 File: $(basename ${{ steps.check_output.outputs.video_path }})"
          echo "  📏 Size: ${{ steps.check_output.outputs.size }}"
          echo "  ⏱️  Duration: ${{ steps.check_output.outputs.duration }}"
          echo "  📐 Resolution: ${{ steps.check_output.outputs.resolution }}"
          echo ""
          echo "📥 Download from 'Artifacts' section above ⬆️"
          echo ""
          echo "Next Steps:"
          echo "  1. Download and watch the video"
          echo "  2. Check character animations"
          echo "  3. Verify text display"
          echo "  4. Ready to add YouTube upload? Let me know!"
        else
          echo "Status: ❌ FAILED"
          echo ""
          echo "Video was not generated. Check logs above for errors."
          echo ""
          echo "Common issues:"
          echo "  - Missing dependencies"
          echo "  - FFmpeg not working"
          echo "  - Font issues"
          echo "  - Memory/timeout problems"
        fi
        echo ""
        echo "════════════════════════════════════════════════════════"
